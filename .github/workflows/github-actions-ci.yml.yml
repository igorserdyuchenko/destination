name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules/
          key: ${{ github.sha }}
          restore-keys: |
            ${{ github.sha }}
            node-modules-

  security_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run security check
        run: npm audit --audit-level=critical || true
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules/
          key: ${{ github.sha }}
          restore-keys: |
            ${{ github.sha }}
            node-modules-

  test:
    runs-on: ubuntu-latest
    needs: [lint, security_check]
    strategy:
      matrix:
        node-version: [16, 18]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Start postgres service
        uses: docker://postgres:latest
      - name: Run test
        run: npm test
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/
      - name: Upload junit report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: report.xml

  integration_test:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.branch == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Start postgres and redis services
        run: |
          docker run -d --name postgres postgres:latest
          docker run -d --name redis redis:latest
      - name: Run integration test
        run: npm run integration-test
      - name: Stop services
        run: |
          docker stop postgres
          docker stop redis

  build:
    runs-on: ubuntu-latest
    needs: [integration_test]
    if: github.event.branch == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: Build and push image
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.action == 'push' && github.event.ref_type == 'tag'
    environment:
      name: production
      url: https://myapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name my-cluster
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/my-app my-app=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment/my-app