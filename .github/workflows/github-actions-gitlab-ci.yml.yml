```yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies and lint
        run: |
          echo "Running CI for branch: ${GITHUB_REF_NAME}"
          export PATH="./node_modules/.bin:$PATH"
          npm ci
          npm run lint
        env:
          NODE_ENV: production
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: my-app
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          CACHE_DIR: .cache
        if: github.event.branch == 'main' || github.event.action == 'pull_request'

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies and test
        run: |
          npm ci
          npm test
        env:
          NODE_ENV: production
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: my-app
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          CACHE_DIR: .cache
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/
      - name: Upload JUnit report
        uses: actions/upload-artifact@v3
        with:
          name: report
          path: report.xml
    strategy:
      matrix:
        node-version: [16, 18]
    name: "test-node-${{ matrix.node-version }}"

  build:
    runs-on: ubuntu-latest
    needs: test
    services:
      docker:
        image: docker:dind
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Docker
        uses: actions/setup-docker@v2
      - name: Login to ECR
        run: |
          apk add --no-cache aws-cli bash
          aws --version
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: my-app
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: my-app
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          key: ${{ github.ref_name }}
          paths:
            - node_modules/
            - .cache/
    if: github.event.branch == 'main'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://myapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name my-cluster
        env:
          AWS_REGION: us-east-1
      - name: Deploy to EKS
        run: |
          set -e
          kubectl set image deployment/my-app my-app=$DOCKER_IMAGE
          kubectl rollout status deployment/my-app
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: my-app
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
    if: github.event.action == 'push' && startsWith(github.event.ref, 'refs/tags/')
```